# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          cache: 'pip'
          cache-dependency-path: |
            **/requirements.txt

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: sprite_formatter.py
          mode: app
          enable-plugins: pyside6
          windows-console-mode: disable

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }} Build
          path: |
            build/*.exe
            build/*.bin
            build/*.app/**/*
          include-hidden-files: true
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Code and Clean Latest Release.
        uses: actions/checkout@v4
      - run: gh release delete latest_build --cleanup-tag --yes
        continue-on-error: true
      - run: gh release create latest_build --prerelease --title "Latest Builds" --notes "The latest working builds of this application."

      - name: Download Artifacts from Build Step.
        uses: actions/download-artifact@v5
      - run: chmod +x "macOS Build/sprite_formatter.app/Contents/MacOS/sprite_formatter"
      - run: tar -C "macOS Build" -pcvf macos_build.tar .
      - run: chmod +x "Linux Build/sprite_formatter.bin"
      - run: tar -C "Linux Build" -pcvf linux_build.tar .
      #- run: cd "Windows Build" && zip -r windows_build.zip . && cd .. && mv "Windows Build/windows_build.zip" windows_build.zip

      - name: Add Artifacts to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest_build
          overwrite_files: true
          files: |
            macos_build.tar
            linux_build.tar
